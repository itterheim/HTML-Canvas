{"version":3,"sources":["ts/config.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.1b5d82cd.map","sourceRoot":"..","sourcesContent":["export class Config {\r\n    public probabilities = [0, 1, 2, 4, 8];\r\n\r\n    private element: HTMLDivElement;\r\n\r\n    constructor (private scale: number, private callback: (scale: number, probabilities: number[]) => void) {\r\n        const html = `\r\n            <div id=\"config\">\r\n                <label for=\"scale\">scale (<span id=\"scaleval\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"scalerange\" name=\"scale\" min=\"1\" max=\"40\" value=\"${this.probabilities[0]}\" />\r\n                <br/>\r\n                <label for=\"n0\">0 neighbours (<span id=\"n0val\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"n0range\" name=\"n0\" min=\"0\" max=\"100\" value=\"${this.probabilities[0]}\" />\r\n                <br/>\r\n                <label for=\"n1\">1 neighbour (<span id=\"n1val\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"n1range\" name=\"n1\" min=\"0\" max=\"100\" value=\"${this.probabilities[1]}\" />\r\n                <br/>\r\n                <label for=\"n2\">2 neighbours (<span id=\"n2val\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"n2range\" name=\"n2\" min=\"0\" max=\"100\" value=\"${this.probabilities[2]}\" />\r\n                <br/>\r\n                <label for=\"n3\">3 eighbours (<span id=\"n3val\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"n3range\" name=\"n3 min=\"0\" max=\"100\" value=\"${this.probabilities[3]}\" />\r\n                <br/>\r\n                <label for=\"n4\">4 neighbours (<span id=\"n4val\"></span>)</label><br/>\r\n                <input type=\"range\" id=\"n4range\" name=\"n4\" min=\"0\" max=\"100\" value=\"${this.probabilities[4]}\" />\r\n                <br/>\r\n                <button id=\"run\">Run</button>\r\n            </div>\r\n        `;\r\n        document.body.insertAdjacentHTML('beforeend', html);\r\n        this.element = document.getElementById('config') as HTMLDivElement;\r\n        this.element = document.getElementById('overlay') as HTMLDivElement;\r\n\r\n        document.getElementById('run').addEventListener('click', () => this.save());\r\n\r\n        for (let i = 0; i < this.probabilities.length; i++) {\r\n            document.getElementById(`n${i}val`).innerHTML = this.probabilities[i].toString();\r\n        }\r\n\r\n        document.getElementById(`scaleval`).innerHTML = this.scale.toString();\r\n        (document.getElementById(`scalerange`) as HTMLInputElement).value = this.scale.toString();\r\n        for (let i = 0; i <= 4; i++) {\r\n            document.getElementById(`n${i}range`).onchange = (e: Event) => {\r\n                const value = (e.currentTarget as HTMLInputElement).value;\r\n                document.getElementById(`n${i}val`).innerHTML = value;\r\n            };\r\n        }\r\n    }\r\n\r\n    private save () {\r\n\r\n        for (let i = 0; i <= 4; i++) {\r\n            const range = document.getElementById(`n${i}range`) as HTMLInputElement;\r\n            const value = parseInt(range.value, 10);\r\n            this.probabilities[i] = value;\r\n        }\r\n\r\n        console.log(this.probabilities);\r\n\r\n        this.callback(this.scale, this.probabilities);\r\n    }\r\n}\r\n","import { Config } from './config';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n    private config: Config;\r\n\r\n    private tiles: boolean[] = [];\r\n    private w = 10;\r\n    private h = 10;\r\n\r\n    private scale = 10;\r\n    private padding: { x: number, y: number } = { x: 0, y: 0 };\r\n\r\n    private progress = 0;\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        this.config = new Config(this.scale, (scale: number) => {\r\n            window.cancelAnimationFrame(window.anim);\r\n            this.scale = scale;\r\n            this.resize();\r\n            this.run();\r\n        });\r\n        window.onresize = () => {\r\n            window.cancelAnimationFrame(window.anim);\r\n            this.resize();\r\n            this.run();\r\n        };\r\n        this.resize();\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        this.tiles = [];\r\n        this.progress = 0;\r\n\r\n        this.w = Math.floor((this.canvas.width - 0.1 * this.canvas.width) / this.scale);\r\n        this.h = Math.floor((this.canvas.height - 0.1 * this.canvas.height) / this.scale);\r\n\r\n        this.padding.x = Math.floor((this.canvas.width - this.w * this.scale) / 2);\r\n        this.padding.y = Math.floor((this.canvas.height - this.h * this.scale) / 2);\r\n\r\n        let n = 0;\r\n        const limit = this.w * this.h / 1;\r\n        const step = (time: number) => {\r\n            if (n < limit) { window.anim = window.requestAnimationFrame((t) => step(t)); }\r\n            this.progress = n / (this.w * this.h);\r\n            for (let i = 0; i < 10 && n < limit; i++) {\r\n                this.addCell(n === 0);\r\n                n++;\r\n            }\r\n        };\r\n\r\n        this.clear();\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private addCell (random: boolean = false) {\r\n        const available: number[] = [];\r\n        const count = this.w * this.h;\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            if (!this.tiles[i]) {\r\n                const x = i % this.w;\r\n                const y = Math.floor(i  / this.w);\r\n                let neighbours = 0;\r\n                if (x < this.w - 1 && this.tiles[i + 1]) { neighbours++; }\r\n                if (x > 0 && this.tiles[i - 1]) { neighbours++; }\r\n                if (y < this.h - 1 && this.tiles[i + this.w]) { neighbours++; }\r\n                if (y > 0 && this.tiles[i - this.w]) { neighbours++; }\r\n\r\n                const probability = this.neighboursToProbability(neighbours);\r\n                for (let j = 0; j < probability; j++) { available.push(i); }\r\n            }\r\n        }\r\n\r\n        let selected = -1;\r\n        if (available.length > 0) {\r\n            selected = available[Math.floor(Math.random() * available.length)];\r\n        } else if (random) {\r\n            selected = Math.floor(Math.random() * count);\r\n        }\r\n        if (selected >= 0) {\r\n            this.tiles[selected] = true;\r\n\r\n            const tx = selected % this.w;\r\n            const ty = Math.floor(selected / this.w);\r\n            this.renderTile(tx, ty);\r\n        }\r\n\r\n    }\r\n\r\n    private neighboursToProbability (neighbours: number): number {\r\n        // return neighbours < 2 ? 0 : 1;\r\n\r\n        return this.config.probabilities[neighbours];\r\n\r\n        // fill with noise\r\n        // switch (neighbours) {\r\n        //     case 0: return 0;\r\n        //     case 1: return 10;\r\n        //     case 2: return 1;\r\n        //     case 3: return 2;\r\n        //     case 4: return 100;\r\n        //     default: return 0;\r\n        // }\r\n\r\n        // fill without noise\r\n        // switch (neighbours) {\r\n        //     case 0: return 0;\r\n        //     case 1: return 1;\r\n        //     case 2: return 2;\r\n        //     case 3: return 4;\r\n        //     case 4: return 8;\r\n        //     default: return 0;\r\n        // }\r\n\r\n        // empty 2x2 spaces\r\n        // switch (neighbours) {\r\n        //     case 0: return 0;\r\n        //     case 1: return 1;\r\n        //     case 2: return 0;\r\n        //     case 3: return 5;\r\n        //     case 4: return 10;\r\n        //     default: return 0;\r\n        // }\r\n\r\n        // switch (neighbours) {\r\n        //     case 0: return 0;\r\n        //     case 1: return 20;\r\n        //     case 2: return 1;\r\n        //     case 3: return 5;\r\n        //     case 4: return 5;\r\n        //     default: return 0;\r\n        // }\r\n    }\r\n\r\n    private renderTile (x: number, y: number) {\r\n        // this.ctx.fillStyle = `rgba(0, 0, 0, ${1 - (0.2 + (0.8 * this.progress))})`;\r\n        this.ctx.fillStyle = `rgba(0, 0, 0, ${0.2 + (0.8 * this.progress)})`;\r\n        this.ctx.fillRect(\r\n            this.padding.x + x * this.scale,\r\n            this.padding.y + y * this.scale,\r\n            this.scale,\r\n            this.scale\r\n        );\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nlet dead = document.body.querySelector('canvas') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\ndead = document.body.querySelector('div') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}