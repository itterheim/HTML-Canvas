{"version":3,"sources":["ts\\CosEmitter.ts","ts\\Rectangle.ts","ts\\SinEmitter.ts","ts\\App.ts","ts\\generative.ts"],"names":[],"mappings":";;;;AAEA,IAAA,aAAA,aAAA,YAAA;AACI,aAAA,UAAA,CAAqB,CAArB,EAAwC,CAAxC,EAA0D,KAA1D,EAAuE;AAAlD,ACIzB,IAAA,SDJyB,CAAA,ECIzB,CDJyB,CAAA,WCIzB,YAAA;ADJ4C,ACKxC,aDLwC,ACKxC,CDLwC,GAAA,CAAA,ICKxC,CAAoB,CAApB,EAAsC,CAAtC,EAAwD,CAAxD,EAA0E,CAA1E,EAAmF;ADLzB,ACKtC,ACNxB,IAAA,SFC8D,ACKtC,CAAA,GAAA,ACNxB,CFC8D,ACKtC,GDLsC,KAAA,IED9D,YAAA;AFC+E,ACKrC,ACLtC,aDKsC,ACLtC,CDKsC,GAAA,CAAA,KCLtC,CAAqB,CAArB,EAAwC,CAAxC,EAA0D,KAA1D,EAAuE;ACH3E,AHKW,ACGiD,ACLnC,ICHzB,SFQ4D,ACLnC,CDKmC,ACLnC,CFEd,ECGiD,ACLnC,CDKmC,ACLnC,CCHzB,KHKW,CAAA,EGLX,MHKW,GAAP,KGLJ,CAAA,IHKqB,CAAjB,EAA4B,CAA5B,EAAqC;AGFzC,AHGQ,ACEsE,ACLlC,ICA5C,SFK8E,ACLlC,CDKkC,ACLlC,CFG7B,CAAC,CCE8D,ACLlC,CCA5C,AFK8E,ACLlC,GFGvB,GAAL,CAAS,CGHzB,IHG8B,KAAL,GAAa,CGHtC,CAAA,GHG2C,IAAL,CAAU,KAAK,GAAL,CAAS,IAAI,KAAK,CAAlB,EAAqB,CAArB,IAA0B,KAAK,GAAL,CAAS,IAAI,KAAK,CAAlB,EAAqB,CAArB,CAApC,CAAtB,IAAsF,CAAvF,IAA4F,CAAnG;AGFR,AHGK,ACGA,ACPyD,AEH9D,IDIA,ACJA,CJKW,OILX,CFG8D,KAAA,CCC9D,CCJA,CFG8D,KAAA,CCC9D,ACJA,CAAA,aDIA,CAAA;AASA,AHLA,ACIW,ACToE,AED/E,IDWA,ACXM,MDWN,ACXY,CJMZ,GCIW,AGVK,MAAA,CJMhB,EGKA,AFDW,AGVC,CHUD,CGVX,KHUW,GAAP,EECJ,UFDI;AEQA,AHlBJ,ACWQ,ACRG,CFHX,EAAA,SCWc,CEOV,EDfO,CCeP,EFPwB,CEOxB,IFP6B,CCRtB,CAAA,IDQiB,ICRjB,CDQiC,CAAhB,CCRxB,EDQ4C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","file":"generative.495f3810.map","sourceRoot":"..","sourcesContent":["import { IEmitter } from './IEmitter';\r\n\r\nexport class CosEmitter implements IEmitter {\r\n    constructor (private x: number, private y: number, public scale: number) {}\r\n\r\n    public getValue (x: number, y: number): number {\r\n        return (Math.cos(this.scale * Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2))) + 1) / 2;\r\n    }\r\n}\r\n","export interface IRectangle {\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n}\r\n\r\nexport class Rectangle implements IRectangle {\r\n    constructor (public x: number, public y: number, public w: number, public h: number) {\r\n\r\n    }\r\n\r\n    public update (): void {\r\n        const add: number = Math.random() * 2 - 1;\r\n        const move: number = add / 2;\r\n\r\n        this.x -= move;\r\n        this.y -= move;\r\n        this.w += add;\r\n        this.h += add;\r\n    }\r\n\r\n    public getModified (c: number): IRectangle {\r\n        const add: number = c * 20 - 10;\r\n        const move: number = add / 2;\r\n\r\n        return {\r\n            h: this.h + add,\r\n            w: this.w + add,\r\n            x: this.x - move,\r\n            y: this.y - move\r\n        };\r\n    }\r\n}\r\n","import { IEmitter } from './IEmitter';\r\n\r\nexport class SinEmitter implements IEmitter {\r\n    constructor (private x: number, private y: number, public scale: number) {}\r\n\r\n    public getValue (x: number, y: number): number {\r\n        return (Math.sin(this.scale * Math.sqrt(Math.pow(x - this.x, 2) + Math.pow(y - this.y, 2))) + 1) / 2;\r\n    }\r\n}\r\n","import { CosEmitter } from './CosEmitter';\r\nimport { IEmitter } from './IEmitter';\r\nimport { NoiseEmitter } from './NoiseEmitter';\r\nimport { IRectangle, Rectangle } from './Rectangle';\r\nimport { SinEmitter } from './SinEmitter';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        raf: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private rectangles: Rectangle[] = [];\r\n    private emitters: IEmitter[] = [];\r\n\r\n    constructor() {\r\n        window.cancelAnimationFrame(window.raf);\r\n        console.clear();\r\n\r\n        this.canvas = document.getElementById('image') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n\r\n        this.emitters.push(new SinEmitter(100, 100, 1));\r\n        this.emitters.push(new CosEmitter(this.canvas.width - 100, 100, 1));\r\n        this.emitters.push(new SinEmitter(this.canvas.width - 100, this.canvas.height - 100, 1));\r\n        console.log(this.emitters);\r\n\r\n        const size = this.canvas.width / 100;\r\n        for (let i = 0; i < this.canvas.width; i += size) {\r\n            for (let j = 0; j < this.canvas.height; j += size) {\r\n                this.rectangles.push(new Rectangle(i, j, size, size));\r\n            }\r\n        }\r\n\r\n        this.run();\r\n    }\r\n\r\n    public run(): void {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        const increase = 0.0001;\r\n        for (const emitter of this.emitters) {\r\n            emitter.scale = (emitter.scale + increase) % 0.1;\r\n        }\r\n\r\n        for (const rect of this.rectangles) {\r\n            const c = this.getCoefficient(rect.x, rect.y);\r\n            this.renderRectangle(rect.getModified(c));\r\n        }\r\n\r\n        window.raf = window.requestAnimationFrame(() => this.run());\r\n    }\r\n\r\n    private renderRectangle(rect: IRectangle): void {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = 'rgba(60,120,255,0.2)';\r\n        this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h);\r\n    }\r\n\r\n    private getCoefficient (x: number, y: number): number {\r\n        let c = 0;\r\n        let n = 0;\r\n\r\n        for (const emitter of this.emitters) {\r\n            c += emitter.getValue(x, y);\r\n            n++;\r\n        }\r\n\r\n        return (c / n) - 0.5;\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconst app = new App();\r\n"]}