{"version":3,"sources":["ts/Heightmap.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.7858ac0f.js","sourceRoot":"..","sourcesContent":["export class HeightMap {\r\n    private data: number[];\r\n    private layers: number = 10;\r\n\r\n    constructor (public readonly width: number, public readonly height: number) {\r\n        this.data = new Array(this.width * this.height)\r\n            .fill(0)\r\n            // .map((_, i) => Math.round((this.layers - 1) * Math.abs(Math.sin(this.indexToXY(i).reduce((s, x) => s * x, 1) / 150))));\r\n            // .map((_, i) => Math.round((this.layers - 1) * (1 + Math.sin(i / 100)) / 2));\r\n            .map(() => Math.floor(Math.random() * this.layers));\r\n        console.log(this.data);\r\n    }\r\n\r\n    public render (ctx: CanvasRenderingContext2D, x: number, y: number, tileSize: number) {\r\n        const maps: number[][][] = new Array(this.layers).fill(undefined).map(() => []);\r\n\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            const value = this.data[i];\r\n            const xy = this.indexToXY(i);\r\n\r\n            for (let v = value; v >= 0; v--) {\r\n                maps[v].push(xy);\r\n            }\r\n        }\r\n\r\n        for (let value = 0; value < maps.length; value++) {\r\n            const scale = 1 + value * 0.01;\r\n\r\n            const offsetX = (ctx.canvas.width / 2) + (x - (ctx.canvas.width / 2)) * scale;\r\n            const offsetY = (ctx.canvas.height / 2) + (y - (ctx.canvas.height / 2)) * scale;\r\n\r\n            ctx.fillStyle = `rgba(0,0,0,${0.5 * value / (this.layers - 1)})`;\r\n\r\n            for (const xy of maps[value]) {\r\n                ctx.fillRect(\r\n                    offsetX + xy[0] * tileSize * scale,\r\n                    offsetY + xy[1] * tileSize * scale,\r\n                    tileSize * scale,\r\n                    tileSize * scale);\r\n            }\r\n        }\r\n    }\r\n\r\n    private indexToXY (i: number) {\r\n        return [i % this.width, Math.floor(i / this.width)];\r\n    }\r\n\r\n    private xyToIndex (x: number, y: number) {\r\n        return y * this.width + x;\r\n    }\r\n}\r\n","import { HeightMap } from './Heightmap';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => this.resize();\r\n        this.resize();\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        const tileSize = 30;\r\n        const size = 2 * Math.ceil(Math.max(this.canvas.width, this.canvas.height) / tileSize);\r\n\r\n        const offset = [this.canvas.width, this.canvas.height].map((x) => Math.round(x / 2) - Math.round(size * tileSize / 2));\r\n        const map = new HeightMap(size, size);\r\n\r\n        let drag: number[];\r\n        this.canvas.onmousedown = (e) => drag = [e.clientX, e.clientY];\r\n        this.canvas.onmouseup = () => drag = undefined;\r\n        this.canvas.onmouseout = () => drag = undefined;\r\n        this.canvas.onmousemove = (e) => {\r\n            if (drag) {\r\n                const diff = [drag[0] - e.clientX, drag[1] - e.clientY];\r\n                offset.forEach((_, i) => offset[i] -= diff[i]);\r\n                drag = [e.clientX, e.clientY];\r\n            }\r\n        };\r\n\r\n        this.canvas.ontouchstart = (e) => drag = [e.touches[0].clientX, e.touches[0].clientY];\r\n        this.canvas.ontouchend = () => drag = undefined;\r\n        this.canvas.ontouchcancel = () => drag = undefined;\r\n        this.canvas.ontouchmove = (e) => {\r\n            if (drag) {\r\n                const diff = [drag[0] - e.touches[0].clientX, drag[1] - e.touches[0].clientY]\r\n                    .map((x) => x * window.devicePixelRatio);\r\n                offset.forEach((_, i) => offset[i] -= diff[i]);\r\n                drag = [e.touches[0].clientX, e.touches[0].clientY];\r\n            }\r\n        };\r\n\r\n        const step = (_: number) => {\r\n            window.anim = window.requestAnimationFrame((t) => step(t));\r\n            this.clear();\r\n\r\n            map.render(this.ctx, offset[0], offset[1], tileSize);\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = window.innerWidth;\r\n        const h = window.innerHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}