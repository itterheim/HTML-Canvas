{"version":3,"sources":["ts/Automaton.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.eaa25bce.js","sourceRoot":"..","sourcesContent":["export class Automaton {\r\n    public data: number[] = [];\r\n\r\n    constructor (private width: number, private height: number) {\r\n        this.data = new Array(this.width * this.height).fill(0);\r\n    }\r\n\r\n    public update () {\r\n        // apply rules and update data;\r\n        this.data = this.data.map((x, i, d) => {\r\n            let top = i - this.width;\r\n            if (top < 0) { top += this.data.length; }\r\n            let bottom = i + this.width;\r\n            if (bottom >= this.data.length) { bottom -= this.data.length; }\r\n\r\n            let left = i - 1;\r\n            if (i % this.width === 0) { left += this.width - 1; }\r\n\r\n            let right = i + 1;\r\n            if (right % this.width === 0) { right -= this.width; }\r\n\r\n            const neighbors = [\r\n                d[top],\r\n                d[right],\r\n                d[bottom],\r\n                d[left]\r\n            ];\r\n            const sum = neighbors.reduce((s, v) => s + v, 0);\r\n\r\n            if (sum > 50 && x < 20) {\r\n                return x + 2.5;\r\n            } else if (sum > 0 && x < 20) {\r\n                return x + 0.5;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    public setXY (value: number, x: number, y: number) {\r\n        const index = y * this.width + x;\r\n        this.data[index] = value;\r\n    }\r\n\r\n    public setRandom (limit: number = 0.5) {\r\n        this.data = this.data.map((_) => Math.random() > limit ? 1 : 0);\r\n    }\r\n}\r\n","import { Automaton } from './Automaton';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private padding = { v: 0, h: 0 };\r\n    private tile = 10;\r\n    private width = 0;\r\n    private height = 0;\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => {\r\n            window.cancelAnimationFrame(window.anim);\r\n            this.resize();\r\n            this.run();\r\n        };\r\n        this.resize();\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        const automaton = new Automaton(this.width, this.height);\r\n        automaton.setRandom(0.995);\r\n\r\n        const step = (time: number) => {\r\n            window.anim = window.requestAnimationFrame((t) => step(t));\r\n            automaton.update();\r\n            this.clear();\r\n            this.render(automaton.data);\r\n        };\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n\r\n        this.tile = Math.floor(this.canvas.height / 70);\r\n\r\n        this.width = Math.floor(this.canvas.width / this.tile);\r\n        this.height = Math.floor(this.canvas.height / this.tile);\r\n        this.padding.h = Math.floor((this.canvas.width - (this.width * this.tile)) / 2);\r\n        this.padding.v = Math.floor((this.canvas.height - (this.height * this.tile)) / 2);\r\n    }\r\n\r\n    private render (data: number[]) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            const x = i % this.width;\r\n            const y = Math.floor(i / this.width);\r\n            this.renderCell(data[i], x, y);\r\n        }\r\n    }\r\n\r\n    private renderCell (value: number, x: number, y: number) {\r\n        if (value <= 0) { return; }\r\n\r\n        // this.ctx.fillStyle = '#000';\r\n        this.ctx.fillStyle = `rgba(0,0,0,${value / 20})`;\r\n        this.ctx.fillRect(\r\n            this.padding.h + x * this.tile,\r\n            this.padding.v + y * this.tile,\r\n            this.tile,\r\n            this.tile\r\n        );\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}