{"version":3,"sources":["ts/Circle.ts","ts/Worm.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.67b52154.map","sourceRoot":"..","sourcesContent":["export class Circle {\r\n    constructor (public x: number, public y: number, public r: number, public a: number = null) { }\r\n}\r\n","import { Circle } from './Circle';\r\n\r\nexport class Worm {\r\n    private circles: Circle[] = [];\r\n    private target: { x: number, y: number, a: number };\r\n    private color: string;\r\n    private gap: number;\r\n\r\n    constructor (private area: {width: number, height: number}, private limit = 11, private speed = 1) {\r\n        if (this.limit % 2 === 0) { this.limit++; }\r\n\r\n        this.color = `rgb(${Math.random() * 255},${Math.random() * 255},${Math.random() * 255})`;\r\n        this.gap = 1 + Math.random() * 5;\r\n\r\n        for (let i = 0; i < this.limit; i++) {\r\n            this.addCircle();\r\n        }\r\n\r\n        this.udpateTarget();\r\n    }\r\n\r\n    public addCircle () {\r\n        let x = 0;\r\n        let y = 0;\r\n        let a: number = null;\r\n\r\n        if (this.circles.length === 0) {\r\n            x = Math.random() * this.area.width;\r\n            y = Math.random() * this.area.height;\r\n        } else {\r\n            const last = this.circles[this.circles.length - 1];\r\n            const r = this.gap;\r\n\r\n            a = last.a + Math.random() * (Math.PI / 2) - (Math.PI / 4);\r\n            x = last.x + r * Math.cos(a);\r\n            y = last.y + r * Math.sin(a);\r\n\r\n            x = x > this.area.width ? x - this.area.width : x;\r\n            x = x < 0 ? x + this.area.width : x;\r\n            y = y > this.area.height ? y - this.area.height : y;\r\n            y = y < 0 ? y + this.area.height : y;\r\n        }\r\n\r\n        this.circles.push(new Circle(x, y, 10, a));\r\n\r\n        if (this.circles.length > this.limit) { this.circles.shift(); }\r\n        this.updateRadius();\r\n    }\r\n\r\n    public step () {\r\n        for (let i = this.circles.length - 1; i >= 0; i--) {\r\n            const current = this.circles[i];\r\n            const previous = this.circles[i - 1];\r\n\r\n            if (i === this.circles.length - 1) {\r\n                let x = this.target.x - current.x;\r\n                let y = this.target.y - current.y;\r\n                const mag = Math.sqrt(x * x + y * y);\r\n                x = x * this.speed / mag;\r\n                y = y * this.speed / mag;\r\n\r\n                current.x += x;\r\n                current.y += y;\r\n            }\r\n\r\n            if (previous) {\r\n                let x = previous.x - current.x;\r\n                let y = previous.y - current.y;\r\n\r\n                const mag = Math.sqrt(x * x + y * y);\r\n                x = x * this.gap / mag;\r\n                y = y * this.gap / mag;\r\n\r\n                previous.x = current.x + x;\r\n                previous.y = current.y + y;\r\n\r\n                current.a = Math.atan((current.y - previous.y) / (current.x - previous.x));\r\n            }\r\n        }\r\n\r\n        this.udpateTarget();\r\n    }\r\n\r\n    public render (ctx: CanvasRenderingContext2D, t: number) {\r\n        let color = true;\r\n        for (let i = 0; i < this.circles.length; i++) {\r\n            const circle = this.circles[i];\r\n\r\n            if (color) {\r\n                ctx.fillStyle = this.color;\r\n            } else {\r\n                ctx.fillStyle = '#fff';\r\n            }\r\n\r\n            const r = 3 * circle.r / 4 + (circle.r / 4) * ((1 + Math.sin(t / (this.speed * 100) + i / 2)) / 2);\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, r, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n\r\n            color = !color;\r\n        }\r\n    }\r\n\r\n    private updateRadius () {\r\n        for (let i = 0; i < this.circles.length; i++) {\r\n            const circle = this.circles[i];\r\n            const ratio = (Math.sin(Math.PI * i / (this.circles.length - 1)));\r\n            circle.r = 5 + Math.min(this.circles.length / 5, 20) * ratio;\r\n        }\r\n    }\r\n\r\n    private udpateTarget () {\r\n        const head = this.circles[this.circles.length - 1];\r\n        let distance = 0;\r\n\r\n        if (head && this.target) {\r\n            const x = this.target.x - head.x;\r\n            const y = this.target.y - head.y;\r\n            distance = Math.sqrt(x * x + y * y);\r\n        }\r\n\r\n        if (distance < 20) {\r\n            this.target = { x: Math.random() * this.area.width, y: Math.random() * this.area.height, a: 0};\r\n        }\r\n    }\r\n}\r\n","import { Worm } from './Worm';\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private worms: Worm[] = [];\r\n\r\n    constructor () {\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        const area = { width: this.canvas.width, height: this.canvas.height };\r\n        for (let i = 0; i < 20; i++) {\r\n            const size = 10 + Math.floor(Math.random() * 100);\r\n            this.worms.push(new Worm(area, size, 0.25 + Math.random() * 2));\r\n        }\r\n\r\n        this.run();\r\n    }\r\n\r\n    public run () {\r\n        const update = (t: number) => {\r\n            window.anim = window.requestAnimationFrame(update);\r\n\r\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n            for (const worm of this.worms) {\r\n                worm.step();\r\n            }\r\n\r\n            this.render(t);\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame(update);\r\n    }\r\n\r\n    private render (t: number) {\r\n        for (const worm of this.worms) {\r\n            worm.render(this.ctx, t);\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nconst dead = document.body.querySelector('canvas');\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}