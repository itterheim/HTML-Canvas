{"version":3,"sources":["ts/App.ts","ts/index.ts"],"names":[],"mappings":";AAAa,aAAA,QAAA,YAAA,EAAb,IAAA,EAAA,WAII,SAAA,IACS,KAAA,OAAS,SAAS,cAAc,UAChC,KAAA,IAAM,KAAK,OAAO,WAAW,MAC7B,KAAA,gBAEL,SAAS,KAAK,sBAAsB,aAAc,KAAK,QAElD,KAAA,MA8Bb,OA3BW,EAAA,UAAA,IAAP,WAAA,IAAA,EAAA,KAYI,OAAO,KAAO,OAAO,sBAAsB,SAAC,GAAM,OAXnC,SAAT,EAAU,GACZ,OAAO,KAAO,OAAO,sBAAsB,SAAC,GAAM,OAAA,MAElD,EAAK,IAAI,SACL,KAAK,SAAW,EAAK,OAAO,MAAQ,EACpC,KAAK,SAAW,EAAK,OAAO,OAAS,EACrC,GACA,IAI0C,MAG9C,EAAA,UAAA,cAAR,WACU,IAAA,EAAI,SAAS,KAAK,YAClB,EAAI,SAAS,KAAK,aAEe,iBAA5B,OAAO,kBACT,KAAA,OAAO,MAAQ,EAAI,OAAO,iBAC1B,KAAA,OAAO,OAAS,EAAI,OAAO,mBAE3B,KAAA,OAAO,MAAQ,EACf,KAAA,OAAO,OAAS,IAGjC,EAzCA,GAAa,QAAA,IAAA;;ACmBb,aAAA,QAAA,YAAA,EAnBA,IAAA,EAAA,QAAA,SASM,EAAO,SAAS,KAAK,cAAc,UACrC,GACA,EAAK,WAAW,YAAY,GAEhC,OAAO,qBAAqB,OAAO,MACnC,OAAO,QAAU,KAEjB,QAAQ,QACR,QAAQ,IAAI,IAAI,MAEhB,IAAM,EAAM,IAAI,EAAA","file":"ts.94317a36.map","sourceRoot":"..","sourcesContent":["export class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor () {\r\n        this.canvas = document.createElement('canvas') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.setCanvasSize();\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        this.run();\r\n    }\r\n\r\n    public run (): void {\r\n        const render = (time: number) => {\r\n            window.anim = window.requestAnimationFrame((t) => render(t));\r\n\r\n            this.ctx.fillRect(\r\n                Math.random() * this.canvas.width - 5,\r\n                Math.random() * this.canvas.height - 5,\r\n                10,\r\n                10\r\n            );\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => render(t));\r\n    }\r\n\r\n    private setCanvasSize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        anim: number;\r\n    }\r\n}\r\n\r\nconst dead = document.body.querySelector('canvas');\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.onclick = null;\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nconst app = new App();\r\n"]}