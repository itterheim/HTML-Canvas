{"version":3,"sources":["ts/Maze.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.b246d04c.js","sourceRoot":"..","sourcesContent":["enum Type {\r\n    Down =          0b10000,\r\n    Up =            0b01000,\r\n    Horizontal =    0b00100,\r\n    Left =          0b00010,\r\n    Right =         0b00001\r\n}\r\n\r\nexport class Maze {\r\n    private data: number[];\r\n    private todo: number[];\r\n\r\n    public get done (): boolean { return this.todo.length === 0; }\r\n\r\n    constructor (public width: number, public height: number) {\r\n        this.data = new Array(width * height).fill(0).map((x, i) => i % 2 === 1 ? Type.Down : Type.Up);\r\n        this.todo = [Math.floor(Math.random() * this.data.length)];\r\n    }\r\n\r\n    public update (mess: number = 1) {\r\n        const index = Math.random() > (1 - mess) ? this.todo.splice(Math.floor(Math.random() * this.todo.length), 1)[0] : this.todo.pop();\r\n\r\n        if (index === undefined) { return; }\r\n\r\n        const value = this.data[index];\r\n        const neigh = [\r\n            value & Type.Up ? index + this.width : undefined,\r\n            value & Type.Down ? index - this.width : undefined,\r\n            index % this.width > 0 ? index - 1 : undefined,\r\n            index % this.width < this.width - 1 ? index + 1 : undefined\r\n        ].map((x) => x !== undefined && typeof this.data[x] === 'number' ? x : undefined);\r\n\r\n        const available = neigh.filter((x) => x !== undefined && (this.data[x] === Type.Down || this.data[x] === Type.Up));\r\n\r\n        if (available.length > 1) { this.todo.push(index); }\r\n\r\n        if (available.length > 0) {\r\n            const picked = available[Math.floor(Math.random() * available.length)];\r\n\r\n            if (index - this.width === picked) {\r\n                // up\r\n                this.data[index] |= Type.Horizontal;\r\n                this.data[picked] |= Type.Horizontal;\r\n            } else if (index + this.width === picked) {\r\n                // down\r\n                this.data[index] |= Type.Horizontal;\r\n                this.data[picked] |= Type.Horizontal;\r\n            } else if (index - 1 === picked) {\r\n                // left\r\n                this.data[index] |= Type.Left;\r\n                this.data[picked] |= Type.Right;\r\n            } else if (index + 1 === picked) {\r\n                // right\r\n                this.data[index] |= Type.Right;\r\n                this.data[picked] |= Type.Left;\r\n            }\r\n\r\n            this.todo.push(picked);\r\n        }\r\n    }\r\n\r\n    public render (ctx: CanvasRenderingContext2D, tile: number) {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            const x = i % this.width;\r\n            const y = Math.floor(i / this.width);\r\n            const value = this.data[i];\r\n\r\n            this.renderTriangle(ctx, x, y, value, tile);\r\n        }\r\n    }\r\n\r\n    private renderTriangle (ctx: CanvasRenderingContext2D, x: number, y: number, value: number, tile: number) {\r\n        const offsetX = Math.floor((ctx.canvas.width - (this.width * (tile / 2))) / 2);\r\n        const offsetY = Math.floor((ctx.canvas.height - (this.height * tile)) / 2);\r\n\r\n        const half = tile / 2;\r\n\r\n        const centerX = offsetX + x * 0.5 * tile;\r\n        const centerY = offsetY + y * tile;\r\n\r\n        if ((value & Type.Up) > 0) {\r\n            if ((value & Type.Left) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX, centerY - half);\r\n                ctx.lineTo(centerX - half, centerY + half);\r\n                ctx.stroke();\r\n            }\r\n            if ((value & Type.Right) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX, centerY - half);\r\n                ctx.lineTo(centerX + half, centerY + half);\r\n                ctx.stroke();\r\n            }\r\n            if ((value & Type.Horizontal) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX + half, centerY + half);\r\n                ctx.lineTo(centerX - half, centerY + half);\r\n                ctx.stroke();\r\n            }\r\n        } else {\r\n            if ((value & Type.Left) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX, centerY + half);\r\n                ctx.lineTo(centerX - half, centerY - half);\r\n                ctx.stroke();\r\n            }\r\n            if ((value & Type.Right) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX, centerY + half);\r\n                ctx.lineTo(centerX + half, centerY - half);\r\n                ctx.stroke();\r\n            }\r\n            if ((value & Type.Horizontal) === 0) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(centerX - half, centerY - half);\r\n                ctx.lineTo(centerX + half, centerY - half);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Maze } from './Maze';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        // window.onresize = () => this.resize();\r\n        this.resize();\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        const tile = 20;\r\n\r\n        let w = Math.floor((this.canvas.width - 100) / (tile / 2));\r\n        if (w % 2 === 0) { w--; }\r\n        let h = Math.floor((this.canvas.height - 100) / tile);\r\n        if (h % 2 === 0) { h--; }\r\n\r\n        const maze = new Maze(w, h);\r\n\r\n        const step = (time: number) => {\r\n            if (!maze.done) {\r\n                window.anim = window.requestAnimationFrame((t) => step(t));\r\n                for (let i = 0; i < 10; i++) { maze.update(0.01); }\r\n            }\r\n            this.clear();\r\n            maze.render(this.ctx, tile);\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        // this.ctx.fillStyle = '#000';\r\n        // this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}