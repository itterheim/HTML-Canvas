{"version":3,"sources":["ts/Maze.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.cc5f429c.js","sourceRoot":"..","sourcesContent":["export class Maze {\r\n    private data: number[];\r\n    private todo: number[];\r\n\r\n    public get done (): boolean { return this.todo.length === 0; }\r\n\r\n    constructor (public width: number, public height: number) {\r\n        this.data = new Array(width * height).fill(0);\r\n        this.todo = [Math.floor(Math.random() * this.data.length)];\r\n    }\r\n\r\n    public update (mess: number = 1) {\r\n        const index = Math.random() > (1 - mess) ? this.todo.splice(Math.floor(Math.random() * this.todo.length), 1)[0] : this.todo.pop();\r\n        // const index = Math.random() > (1 - mess) ? this.todo.splice(Math.floor(Math.random() * this.todo.length), 1)[0] : this.todo.shift();\r\n\r\n        const neighbors = [\r\n            this.data[index - this.width],\r\n            index % this.width < this.width - 1 ? this.data[index + 1] : undefined,\r\n            this.data[index + this.width],\r\n            index % this.width > 0 ? this.data[index - 1] : undefined\r\n        ];\r\n\r\n        const available = neighbors.map((x, i) => (x === 0 ? Math.pow(2, i) : undefined)).filter((x) => Boolean(x));\r\n\r\n        if (available.length > 1) { this.todo.push(index); }\r\n\r\n        if (available.length > 0) {\r\n            const picked = available[Math.floor(Math.random() * available.length)];\r\n            const nextIndex = this.getNextIndex(index, picked);\r\n\r\n            this.data[index] |= picked;\r\n            this.data[nextIndex] |= this.getOpposite(picked);\r\n\r\n            this.todo.push(nextIndex);\r\n        }\r\n    }\r\n\r\n    public getPath (): string {\r\n        const textual = this.data.map((x) => this.asText(x));\r\n\r\n        let result = '\\n';\r\n        for (let i = 0; i < textual.length; i += this.width) {\r\n            result += textual.slice(i, i + this.width).join('') + '\\n';\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public getGrid (): string {\r\n        let x = '';\r\n        for (const cell of this.data) {\r\n            if (cell & 0b0100) {\r\n                x += ' ';\r\n            } else {\r\n                x += '_';\r\n            }\r\n\r\n            if (cell & 0b0010) {\r\n                x += ' ';\r\n            } else {\r\n                x += '|';\r\n            }\r\n        }\r\n        return `(${x})`;\r\n    }\r\n\r\n    public render (ctx: CanvasRenderingContext2D, tile: number) {\r\n        const offsetX = Math.floor((ctx.canvas.width - (this.width * tile)) / 2);\r\n        const offsetY = Math.floor((ctx.canvas.height - (this.height * tile)) / 2);\r\n\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            if (this.data[i] > 0) {\r\n                const x = i % this.width;\r\n                const y = Math.floor(i / this.width);\r\n                const value = this.data[i];\r\n\r\n                ctx.fillStyle = '#fff';\r\n                ctx.fillRect(\r\n                    offsetX + x * tile,\r\n                    offsetY + y * tile,\r\n                    tile,\r\n                    tile\r\n                );\r\n\r\n                ctx.fillStyle = '#000';\r\n                if ((value & 0b0001) === 0) {\r\n                    ctx.fillRect(\r\n                        offsetX + x * tile - 1,\r\n                        offsetY + y * tile - 1,\r\n                        tile + 2,\r\n                        2\r\n                    );\r\n                }\r\n                if ((value & 0b0010) === 0) {\r\n                    ctx.fillRect(\r\n                        offsetX + x * tile + tile - 1,\r\n                        offsetY + y * tile - 1,\r\n                        2,\r\n                        tile + 2\r\n                    );\r\n                }\r\n                if ((value & 0b0100) === 0) {\r\n                    ctx.fillRect(\r\n                        offsetX + x * tile - 1,\r\n                        offsetY + y * tile + tile - 1,\r\n                        tile + 2,\r\n                        2\r\n                    );\r\n                }\r\n\r\n                if ((value & 0b1000) === 0) {\r\n                    ctx.fillRect(\r\n                        offsetX + x * tile - 1,\r\n                        offsetY + y * tile - 1,\r\n                        2,\r\n                        tile + 2\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // ctx.fillStyle = '#f00';\r\n        // ctx.fillText(this.todo.length.toString(), 10, 10);\r\n    }\r\n\r\n    private getNextIndex (index: number, direction: number): number {\r\n        if (direction === 0b0001) { return index - this.width; }\r\n        if (direction === 0b0010) { return index + 1; }\r\n        if (direction === 0b0100) { return index + this.width; }\r\n        if (direction === 0b1000) { return index - 1; }\r\n        return undefined;\r\n    }\r\n\r\n    private getOpposite (direction: number): number {\r\n        if (direction === 0b0001) { return 0b0100; }\r\n        if (direction === 0b0100) { return 0b0001; }\r\n        if (direction === 0b0010) { return 0b1000; }\r\n        if (direction === 0b1000) { return 0b0010; }\r\n        return 0;\r\n    }\r\n\r\n    private asText (direction: number): string {\r\n        if (direction === 0b0000) { return 'O'; }\r\n        if (direction === 0b0001) { return '^'; }\r\n        if (direction === 0b0010) { return '>'; }\r\n        if (direction === 0b0100) { return 'v'; }\r\n        if (direction === 0b1000) { return '<'; }\r\n        if (direction === 0b0011) { return '└'; }\r\n        if (direction === 0b0110) { return '┌'; }\r\n        if (direction === 0b1100) { return '┐'; }\r\n        if (direction === 0b1001) { return '┘'; }\r\n        if (direction === 0b1010) { return '─'; }\r\n        if (direction === 0b0101) { return '│'; }\r\n        if (direction === 0b1110) { return '┬'; }\r\n        if (direction === 0b0111) { return '├'; }\r\n        if (direction === 0b1011) { return '┴'; }\r\n        if (direction === 0b1101) { return '┤'; }\r\n        if (direction === 0b1111) { return '┼'; }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { Maze } from './Maze';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => this.resize();\r\n        this.resize();\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n\r\n        const tile = 15;\r\n        const maze = new Maze(Math.floor((this.canvas.width - 50) / tile), Math.floor((this.canvas.height - 50) / tile));\r\n\r\n        const step = (time: number) => {\r\n            if (!maze.done) {\r\n                window.anim = window.requestAnimationFrame((t) => step(t));\r\n                for (let i = 0; i < 20; i++) { maze.update(0.01); }\r\n            }\r\n            this.clear();\r\n            maze.render(this.ctx, tile);\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private clear () {\r\n        // this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.fillStyle = '#000';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}