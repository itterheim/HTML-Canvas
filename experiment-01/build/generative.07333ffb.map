{"version":3,"sources":["ts/Vector.ts","ts/Tile.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.07333ffb.map","sourceRoot":"..","sourcesContent":["export class Vector {\r\n\r\n    public static random (limit: number = 1): Vector {\r\n        const x = Math.random() * 2 * limit - limit;\r\n        const y = Math.random() * 2 * limit - limit;\r\n\r\n        return new Vector(x, y);\r\n    }\r\n\r\n    public get magnitude (): number { return Math.sqrt(this.x * this.x + this.y * this.y); }\r\n\r\n    constructor (public x: number = 0, public y: number = 0) {}\r\n\r\n    public add (v: Vector) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n    }\r\n\r\n    public round () {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n    }\r\n\r\n    public multiply (n: number) {\r\n        this.x *= n;\r\n        this.y *= n;\r\n    }\r\n\r\n    public clone (): Vector {\r\n        return new Vector(this.x, this.y);\r\n    }\r\n}\r\n","import { Vector } from './Vector';\r\n\r\nexport class Tile {\r\n    private in: Vector[] = [];\r\n    private out: Vector = null;\r\n\r\n    constructor (public x: number, public y: number) {}\r\n\r\n    public render (ctx: CanvasRenderingContext2D, scale: number) {\r\n        // ctx.beginPath();\r\n        // ctx.strokeRect(this.x * scale, this.y * scale, scale, scale);\r\n\r\n        if (this.out) {\r\n            const r = this.out.magnitude / 2;\r\n            const color = `rgba(0,0,0,${Math.min(r, 1)})`;\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(this.x * scale, this.y * scale, scale, scale);\r\n        }\r\n\r\n        // if (this.out) {\r\n        //     ctx.strokeStyle = 'rgba(0,0,0,0.1)';\r\n        //     ctx.moveTo(\r\n        //         this.x * scale + scale / 2,\r\n        //         this.y * scale + scale / 2\r\n        //     );\r\n        //     ctx.lineTo(\r\n        //         this.x * scale + scale / 2 + this.out.x * scale,\r\n        //         this.y * scale + scale / 2 + this.out.y * scale\r\n        //     );\r\n        //     ctx.stroke();\r\n        // }\r\n    }\r\n\r\n    public getSpeed (): Vector {\r\n        if (!this.out) {\r\n            this.out = new Vector();\r\n        }\r\n        return this.out;\r\n    }\r\n\r\n    public addSpeed (speed: Vector) {\r\n        this.in.push(speed);\r\n    }\r\n\r\n    public update () {\r\n        if (this.in && this.in.length > 0) {\r\n            this.out = this.in.reduce((v, x) => {\r\n                v.add(x);\r\n                return v;\r\n            }, new Vector());\r\n        } else {\r\n            this.out = null;\r\n        }\r\n        this.in = [];\r\n    }\r\n}\r\n","import { Tile } from './Tile';\r\nimport { Vector } from './Vector';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private rows = 50;\r\n    private columns = 100;\r\n    private scale = 10;\r\n    private diffusion = 0.05;\r\n\r\n    private tiles: Tile[] = [];\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => this.resize();\r\n        this.resize();\r\n\r\n        this.scale = this.canvas.height / this.rows;\r\n        this.columns = Math.floor(this.canvas.width / this.scale);\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        this.tiles = [];\r\n        for (let xy = 0; xy < this.rows; xy++) {\r\n            for (let xi = 0; xi < this.columns; xi++) {\r\n                const tile = new Tile(xi, xy);\r\n                this.tiles.push(tile);\r\n            }\r\n        }\r\n\r\n        const step = (time: number) => {\r\n            window.anim = window.requestAnimationFrame((t) => step(t));\r\n            const speed = Vector.random(4);\r\n            // const speed = new Vector(2, 1);\r\n            // speed.add(new Vector(2, 0));\r\n            this.tiles[this.xy(Math.floor(this.columns / 2), Math.floor(this.rows / 2))].addSpeed(speed);\r\n            this.clear();\r\n            this.update();\r\n            this.render();\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private update () {\r\n        for (const tile of this.tiles) {\r\n            const tiles = [\r\n                this.tiles[this.xy(tile.x + 1, tile.y + 1)],\r\n                this.tiles[this.xy(tile.x + 1, tile.y - 1)],\r\n                this.tiles[this.xy(tile.x - 1, tile.y + 1)],\r\n                this.tiles[this.xy(tile.x - 1, tile.y - 1)],\r\n                this.tiles[this.xy(tile.x + 1, tile.y)],\r\n                this.tiles[this.xy(tile.x - 1, tile.y)],\r\n                this.tiles[this.xy(tile.x, tile.y + 1)],\r\n                this.tiles[this.xy(tile.x, tile.y - 1)]\r\n            ].filter((x) => x);\r\n\r\n            const bleed = this.diffusion * tiles.length;\r\n\r\n            const speed = tile.getSpeed();\r\n            const bleedSpeed = speed.clone();\r\n            speed.multiply(1 - bleed);\r\n            bleedSpeed.multiply(this.diffusion);\r\n\r\n            for (const updateTile of tiles) {\r\n                updateTile.getSpeed().add(bleedSpeed);\r\n            }\r\n        }\r\n\r\n        for (const tile of this.tiles) {\r\n            const speed = tile.getSpeed();\r\n            if (!speed) { continue; }\r\n\r\n            const position = this.getPosition(new Vector(tile.x, tile.y), speed);\r\n\r\n            const newTile = this.tiles[this.xy(position.x, position.y)];\r\n            if (newTile) {\r\n                newTile.addSpeed(speed);\r\n            }\r\n        }\r\n\r\n        for (const tile of this.tiles) {\r\n            tile.update();\r\n        }\r\n\r\n    }\r\n\r\n    private render () {\r\n        for (const tile of this.tiles) {\r\n            tile.render(this.ctx, this.scale);\r\n        }\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n\r\n    private xy (x: number, y: number): number {\r\n        if (x < 0) { return -1; }\r\n        if (y < 0) { return -1; }\r\n        if (x >= this.columns) { return -1; }\r\n        if (y >= this.rows) { return -1; }\r\n\r\n        return y * this.columns + x;\r\n    }\r\n\r\n    private getPosition (p: Vector, s: Vector): Vector {\r\n        p.add(s);\r\n        p.round();\r\n\r\n        if (p.x >= this.columns) {\r\n            p.x = p.x - (p.x - this.columns) - 1;\r\n            s.x *= -1;\r\n        }\r\n        if (p.y >= this.rows) {\r\n            p.y = p.y - (p.y - this.rows) - 1;\r\n            s.y *= -1;\r\n        }\r\n        if (p.x < 0) {\r\n            p.x *= -1;\r\n            s.x *= -1;\r\n        }\r\n        if (p.y < 0) {\r\n            p.y *= -1;\r\n            s.y *= -1;\r\n        }\r\n\r\n        return p;\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconst app = new App();\r\n"]}