{"version":3,"sources":["ts\\Noise.ts","ts\\App.ts","ts\\generative.ts"],"names":[],"mappings":";;;;AAAA,IAAA,QAAA,aAAA,YAAA;AAGI,aAAA,KAAA,CAAqB,KAArB,EAAkD,MAAlD,EAAsE;ACH1E,ADGyB,ICHzB,QDGyB,ECHzB,QAAA,ADGyB,KAAA,CAAA,EAAA,CCHzB,CAAA;AAOA,ADJyB,oBAAA,GAAA;ACMzB,ADN4C,AEH5C,IDSA,ACTA,MDSA,ECTA,QAAA,GDSA,ICTA,CAAA,ODSA;AAOI,ADbkD,AEDtD,IAAM,MAAM,EFC0C,CCalD,CCdY,EDcZ,GAAA,CCdY,GFCsC,AED1C,EAAZ,GFCsD,CAAA,EAAA;ACW1C,ADX0C,aCW1C,QDX0C,GAAA,CCW1C,GAAyB,IAAI,KAAJ,CAAU,GAAV,EAAe,IAAf,CAAoB,CAApB,CAAzB;AAGJ,ADdkE,eCc3D,oBAAP,CAA4B,OAAO,GAAnC;AACA,ADfiB,aAAA,GCeT,EDfS,GCejB,ADfiB,KAAA;ACiBjB,ADjB8C,aCiBzC,ADjByC,MCiB9C,ADjB8C,GCiBhC,ADjBgC,MAAA,GCiBvB,cAAT,CAAwB,OAAxB,CAAd;AACA,ADpBI,aCoBC,ADpBD,GCoBJ,GAAW,ADpBP,GAAqB,ECoBT,ADpBZ,MCoBO,CAAY,UAAZ,CAAuB,IAAvB,CAAX;AAEA,ADnBA,aCmBK,ADnBA,IAAI,ECmBT,CAAY,CDnBC,CAAb,EAAgB,CCmBhB,GAAoB,ADnBA,KAAK,ECmBE,GDnB3B,EAAgC,GAAhC,ECmBA,ADnBqC;ACoBrC,ADnBI,aCmBC,GDnBK,GCmBV,CAAY,KDnBO,CCmBnB,CDnBI,ECmBiB,OAAO,WAA5B;AAEA,ADpBI,aCoBC,IDpBI,CCoBT,GAAa,ADpBA,ICoBI,ADpBA,CAAb,EAAgB,KCoBH,ADpBQ,KCoBZ,ADpBiB,CCoBP,EAAV,EAAc,CDpBvB,CCoBS,CAAb,ADpBsC,GAAlC,EAAuC;ACsB3C,ADrBQ,aCqBH,GAAL,ODrBe,IAAP,CAAY,KAAK,MAAL,KAAgB,KAAK,EAArB,GAA0B,CAAtC;ACsBX,ADrBQ;ACuBD,ADtBA,QCsBA,SAAA,ADtBK,CCsBL,GAAA,EDtBA,CCsBR,ADtBoB,IAAZ,CAAiB,MAAjB,CCsBR;AACI,ADtBC,aCsBI,GAAL,CAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAK,MAAL,CAAY,KAArC,EAA4C,KAAK,MAAL,CAAY,MAAxD;AACA,ADtBH,YCsBS,OAAO,KAAb;AACA,ADrBG,UAAA,ECqBG,MAAM,CDrBT,CAAA,GCqBc,ADrBd,GAAP,GCqBgB,CAAY,KAAZ,CDrBL,CAAX,CCqBoC,CDrBV,CAA1B,EAAuC,CCqBE,MAAL,CAAY,MAA5C;AAEA,ADvBO,YAAA,CCuBF,KDvBE,KAAA,CAAA,EAAA,CCuBP,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,GAA7B;AACH,ADxBU,KCkBH,WDlBG,CAAA;AC0BH,AD1BgB,QC0BhB,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAAsC,KAAtC,EAAqD,GAArD,EAAgE;AAAhE,AD1B0B,YC0B1B,AD1B0B,MAAA,EC0B1B,GD1B0B,CC0B1B,AD1B0B,EAAA;AC2BtB,AD3BsB,eC2Bf,CD3Be,CAAA,mBC2BtB,CAA6B,YAAA;AACzB,AD5B+B,kBC4B1B,MAAL,CAAY,KAAZ,EAAmB,KAAnB;AACA,AD5BJ,YAAM,IC4BE,CD5BG,CAAC,EAAE,IC4BE,AD5BE,KC4BV,AD5Be,GC4BC,ED5BZ,CC4BR,AD5BJ,EC4B6B;AACrB,AD5BR,YAAM,KAAK,CAAC,EAAE,EC4BD,ED5BK,KAAK,MAAX,CC4BJ,AD5BR,CC4B4B,QAAQ,KAA5B,EAAmC,KAAnC,EAA0C,GAA1C;AACH,AD5BL,YAAM,KAAK,CAAC,KAAK,CAAN,IAAW,KAAK,KAA3B;AC6BC,AD5BD,SCuBA,GDvBM,KAAK,CAAC,KAAK,CAAN,IAAW,KAAK,MAA3B;AC6BH,AD3BG,KCoBI,ODpBE,KAAK,IAAI,CAAf;AC6BI,AD5BJ,QC4BI,ID5BE,KC4BF,AD5BO,CC4BP,GD5BW,CAAf,EC4BI,GAAR,UAAe,KAAf,EAA8B,KAA9B,EAA2C;AACvC,AD3BA,YAAM,CC2BD,IAAI,AD3BE,IC2BE,CD3BG,IC2BhB,EAAoB,AD3BT,CAAY,EAAZ,CC2Ba,CD3BG,EAAhB,CAAX,IC2BgC,KAAhC,EAAuC,GAAvC,EAA4C;AACxC,AD3BJ,YAAM,IC2BI,CD3BC,GC2BG,ED3BE,EC2BE,ID3BP,CC2BY,AD3BA,EAAZ,EAAgB,EC2BT,AD3BP,CC2BmB,AD3B9B,KC2BI;AACA,AD3BJ,YAAM,IC2BI,CD3BC,GC2BG,CAAC,CD3BC,CC2BC,IAAI,CD3BV,CAAY,EAAZ,CC2Be,CD3BC,EAAhB,CAAX,EC2BqB,CAAY,KAAlB,CAAX;AAEA,AD5BJ,YAAM,IC4BI,CD5BC,GC4BG,ED5BE,GC4BG,GD5BR,CAAY,EAAZ,EC4BG,AD5Ba,CC4BC,CAAd,AD5BH,CAAX,CC4B+B,CAAjB,CAAV;AACA,AD3BJ,YAAM,IC2BI,ID3BI,IC2BI,CD3BC,IC2BI,KAAL,CAAW,GD3Bf,CC2BmB,AD3BA,EAAnB,CC2BI,CD3BmB,EAAvB,CC2B0B,CD3BC,EC2BrC,AD3BU,CAAd;AC6BI,AD5BJ,YAAM,KC4BG,GD5BK,KAAK,IC4Bf,CAAkB,KAAK,GD5Bb,CAAmB,CC4BX,CAAW,AD5BnB,EAAuB,EC4BA,GAAf,AD5BoB,CC4BtC,AD5BU,EAA+B,EAA/B,CAAd;AC8BI,AD7BJ,YAAM,KC6BG,GAAL,AD7BU,CC6BD,ID7BM,KC6Bf,GAAqB,KD7BX,CAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EC6BF,GD7BO,CAAhC,CC6BW,AD7BzB,GC6B4C,GAAxC;AACA,AD7BJ,YAAM,KC6BG,GAAL,AD7BU,CC6BD,ID7BM,IC6Bf,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CD7BU,CC6BiB,AD7BE,CC6B7B,CD7BU,EAAuB,KAAK,CAA5B,EAA+B,KAAK,CAApC,CAAd;AC8BC,AD5BD,YAAM,IAAI,KAAK,IAAL,CAAU,EAAV,CAAV;AC6BH,AD5BG,KCeI,ODfE,IAAI,KAAK,IAAL,CAAU,EAAV,CAAV;AC8BI,AD5BJ,QC4BI,ID5BE,IAAI,CC4BN,CAAA,GD5BW,IAAL,CC4BN,AD5BgB,GC4BxB,ED5Bc,EAAiB,KAAjB,CC4BI,CAAlB,AD5BsC,CAAxB,CC4Be,AD5BzB,CC4BJ,EAAsC;AAClC,AD5BA,YC4BM,AD5BA,IC4BI,AD5BA,KC4BK,AD5BA,IAAL,CAAU,CC4BV,CAAY,GD5BZ,EC4BA,AD5BiB,GC4BG,EAA9B,AD5BU,EAAwB,CAAxB,CAAV;AC6BA,AD5BA,YAAM,IAAI,KAAK,IAAL,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAV;AC6BA,AD3BA,eC2BO,AD3BA,CAAC,IC2BI,AD3BA,CAAL,IC2BA,AD3BU,CC2BC,AD3BlB,SC2BO,CAAqB,IAAI,CAAzB,EAA4B,IAAI,CAAhC,EAAmC,CAAnC,EAAsC,GAAtC,CAAP;AACH,AD3BA,KCuBO,ADlDD;ACuDX,AD1BW,UAAA,CC0BX,GAAA,KD1BW,CAAA,SAAA,GAAP,UAAkB,CAAlB,EAA6B,CAA7B,EAAwC,OAAxC,EAAyD,WAAzD,EAA4E;ACjChF,ADkCQ,CClCR,EAAA,SDkCY,QAAgB,CAApB;AClCK,ADmCL,QCnCK,GAAA,CDmCD,ECnCC,GAAA,ODmCmB,CAAxB;AACA,YAAI,YAAoB,CAAxB;AACA,YAAI,WAAmB,CAAvB,CAJwE,CAI7C;AAC3B,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAApB,EAA6B,GAA7B,EAAkC;AAC9B,qBAAS,KAAK,GAAL,CAAS,IAAI,SAAb,EAAwB,IAAI,SAA5B,IAAyC,SAAlD;AAEA,wBAAY,SAAZ;AAEA,yBAAa,WAAb;AACA,yBAAa,CAAb;AACH;AAED,eAAO,QAAQ,QAAf;AACH,KAfM;AAiBC,UAAA,SAAA,CAAA,aAAA,GAAR,UAAuB,KAAvB,EAAsC,CAAtC,EAAiD,CAAjD,EAA0D;AACtD,YAAM,SAAS,KAAK,YAAL,CAAkB,KAAlB,CAAf;AACA,eAAO,OAAO,CAAP,IAAY,CAAZ,GAAgB,OAAO,CAAP,IAAY,CAAnC;AACH,KAHO;AAKA,UAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,KAArB,EAAkC;AAC9B,eAAO,CACH,KAAK,KAAL,GAAa,KAAK,GAAL,CAAS,KAAT,CADV,EAEH,KAAK,KAAL,GAAa,KAAK,GAAL,CAAS,KAAT,CAFV,CAAP;AAIH,KALO;AAOA,UAAA,SAAA,CAAA,IAAA,GAAR,UAAc,CAAd,EAAyB,CAAzB,EAAoC,CAApC,EAA6C;AACzC,eAAO,IAAI,KAAK,IAAI,CAAT,CAAX;AACH,KAFO;AAIA,UAAA,SAAA,CAAA,IAAA,GAAR,UAAc,CAAd,EAAuB;AACnB,eAAO,IAAI,CAAJ,GAAQ,CAAR,IAAa,KAAK,IAAI,CAAJ,GAAQ,EAAb,IAAmB,EAAhC,CAAP;AACH,KAFO;AAGZ,WAAA,KAAA;AA9EA,CAAA,EAAA;AAAa,QAAA,KAAA,GAAA,KAAA","file":"generative.60689dcc.map","sourceRoot":"..","sourcesContent":["export class Noise {\r\n    private angles: number[][] = [];\r\n\r\n    constructor (private width: number = 100, private height: number = 100) {\r\n        for (let x = 0; x < this.width; x++) {\r\n            const column = [];\r\n            for (let y = 0; y <= this.height; y++) {\r\n                column.push(Math.random() * Math.PI * 2);\r\n            }\r\n            this.angles.push(column);\r\n        }\r\n    }\r\n\r\n    public get(x: number = 0, y: number = 0): number {\r\n        const xi = ~~(x % this.width);\r\n        const yi = ~~(y % this.height);\r\n        const xj = (xi + 1) % this.width;\r\n        const yj = (yi + 1) % this.height;\r\n\r\n        const fx = x % 1;\r\n        const fy = y % 1;\r\n\r\n        const lt = this.angles[xi][yi];\r\n        const rt = this.angles[xj][yi];\r\n        const lb = this.angles[xi][yj];\r\n        const rb = this.angles[xj][yj];\r\n\r\n        const dotLt = this.getDotProduct(lt, fx, fy);\r\n        const dotRt = this.getDotProduct(rt, fx - 1, fy);\r\n        const dotLb = this.getDotProduct(lb, fx, fy - 1);\r\n        const dotRb = this.getDotProduct(rb, fx - 1, fy - 1);\r\n\r\n        const u = this.fade(fx);\r\n        const v = this.fade(fy);\r\n\r\n        const a = this.lerp(dotLt, dotRt, u);\r\n        const b = this.lerp(dotLb, dotRb, u);\r\n        const c = this.lerp(a, b, v);\r\n\r\n        return (c + 1) / 2;\r\n    }\r\n\r\n    public getOctave (x: number, y: number, octaves: number, persistence: number): number {\r\n        let total: number = 0;\r\n        let frequency: number = 1;\r\n        let amplitude: number = 1;\r\n        let maxValue: number = 0;  // Used for normalizing result to 0.0 - 1.0\r\n        for (let i = 0; i < octaves; i++) {\r\n            total += this.get(x * frequency, y * frequency) * amplitude;\r\n\r\n            maxValue += amplitude;\r\n\r\n            amplitude *= persistence;\r\n            frequency *= 2;\r\n        }\r\n\r\n        return total / maxValue;\r\n    }\r\n\r\n    private getDotProduct (angle: number, x: number, y: number): number {\r\n        const vector = this.getCartesian(angle);\r\n        return vector[0] * x + vector[1] * y;\r\n    }\r\n\r\n    private getCartesian(angle: number): [number, number] {\r\n        return [\r\n            Math.SQRT2 * Math.cos(angle),\r\n            Math.SQRT2 * Math.sin(angle)\r\n        ];\r\n    }\r\n\r\n    private lerp (a: number, b: number, x: number): number {\r\n        return a + x * (b - a);\r\n    }\r\n\r\n    private fade (t: number): number {\r\n        return t * t * t * (t * (t * 6 - 15) + 10);\r\n    }\r\n}\r\n","import { Noise } from './Noise';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window { raf: number; }\r\n}\r\n\r\n// const PI2 = Math.PI * 2;\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private noise: Noise;\r\n    private distribution: number[] = new Array(100).fill(0);\r\n\r\n    constructor() {\r\n        window.cancelAnimationFrame(window.raf);\r\n        console.clear();\r\n\r\n        this.canvas = document.getElementById('image') as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        this.canvas.width = window.innerWidth;\r\n        this.canvas.height = window.innerHeight;\r\n\r\n        this.noise = new Noise(20, 20);\r\n\r\n        this.run();\r\n    }\r\n\r\n    private run(): void {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        const step = 10000;\r\n        const max = this.canvas.width * this.canvas.height;\r\n\r\n        this.scheduleRender(0, step, max);\r\n    }\r\n\r\n    private scheduleRender(index: number, count: number, max: number) {\r\n        window.requestAnimationFrame(() => {\r\n            this.render(index, count);\r\n            if (index + count < max) {\r\n                this.scheduleRender(index + count, count, max);\r\n            }\r\n        });\r\n    }\r\n\r\n    private render(index: number, count: number) {\r\n        for (let i = index; i < index + count; i++) {\r\n            const x = i % this.canvas.width;\r\n            const y = ~~(i / this.canvas.width);\r\n\r\n            const n = this.getNoise(x, y);\r\n            const alpha = Math.round(n * 100) / 100;\r\n\r\n            this.distribution[Math.floor(n * 100)]++;\r\n\r\n            this.ctx.fillStyle = `rgba(0,0,0,${alpha})`;\r\n            this.ctx.fillRect(x, y, 1, 1);\r\n        }\r\n    }\r\n\r\n    private getNoise (x: number, y: number): number {\r\n        const d = this.canvas.width / 20;\r\n        // return this.noise.get(x / d, y / d);\r\n        return this.noise.getOctave(x / d, y / d, 6, 0.5);\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\nconst app = new App();\r\n"]}