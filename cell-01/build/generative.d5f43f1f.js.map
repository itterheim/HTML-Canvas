{"version":3,"sources":["ts/Automaton.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.d5f43f1f.js","sourceRoot":"..","sourcesContent":["export class Automaton {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private data: number[];\r\n    private iterations: number = 1;\r\n\r\n    private alive: number[];\r\n\r\n    constructor (private rule: number, private size: number = 100, private scale: number = 1) {\r\n        this.canvas = document.createElement('canvas');\r\n        this.canvas.id = `rule-${this.rule}`;\r\n        this.canvas.title = `Rule ${this.rule}`;\r\n        this.canvas.width = this.size * this.scale;\r\n        this.canvas.height = this.size * this.scale;\r\n\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.appendChild(this.canvas);\r\n\r\n        this.data = new Array(this.size).fill(0).map((_) => Math.round(Math.random()));\r\n        this.alive = rule.toString(2).split('').map((x, i, d) => x === '1' ? d.length - i - 1 : -1).filter((x) => x > -1);\r\n    }\r\n\r\n    public async run (): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            const step = () => {\r\n                for (let i = 0; i < 50 && this.iterations < this.size; i++) {\r\n                    this.iterations++;\r\n                    this.update();\r\n                    this.render();\r\n                }\r\n                if (this.iterations < this.size) {\r\n                    window.anim = window.requestAnimationFrame(step);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            };\r\n\r\n            if (this.iterations < this.size) {\r\n                this.render();\r\n                step();\r\n            }\r\n        });\r\n    }\r\n\r\n    private update () {\r\n        this.data = this.data\r\n            .map((x, i, data) => this.alive.includes(parseInt(this.getSlice(this.data, i, 1).join(''), 2)) ? 1 : 0);\r\n    }\r\n\r\n    private render () {\r\n        const y = (this.iterations - 1) * this.scale;\r\n        this.data.forEach((x, i) => {\r\n            this.ctx.fillStyle = x ? '#000' : '#fff';\r\n            this.ctx.fillRect(i * this.scale, y, this.scale, this.scale);\r\n        });\r\n    }\r\n\r\n    private sliceWrap (data: number[], from: number, len: number): number[] {\r\n        let result = [];\r\n        if (from < 0) {\r\n            result = result.concat(data.slice(from + data.length, Math.max(data.length, from + data.length + length)));\r\n            len += from;\r\n            from = 0;\r\n        }\r\n        result = result.concat(data.slice(from, from + len));\r\n        if (from + len > data.length) {\r\n            result = result.concat(data.slice(0, from + len - data.length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private slice (data: number[], position: number, around: number): number[] {\r\n        let from = position - around;\r\n        const to = position + around + 1;\r\n        const len = 2 * around + 1;\r\n\r\n        let result = [];\r\n        if (from - around < 0) {\r\n            result = result.concat(new Array(Math.min(0, from + len) - from).fill(0));\r\n            from = 0;\r\n        }\r\n        if (from < to) {\r\n            result = result.concat(data.slice(from, to));\r\n        }\r\n        if (result.length < len) {\r\n             result = result.concat(new Array(len - result.length).fill(0));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getSlice (data: number[], position: number, around: number): number[] {\r\n        // return this.slice(data, position - around, 2 * around + 1);\r\n        return this.sliceWrap(data, position - around, 2 * around + 1);\r\n    }\r\n}\r\n","import { Automaton } from './Automaton';\r\n\r\nexport class App {\r\n    constructor () {\r\n        this.run();\r\n    }\r\n\r\n    public async run () {\r\n        for (let i = 0; i < 256; i++) {\r\n            await new Automaton(i, 100, 1).run();\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n        timeout: number;\r\n    }\r\n}\r\n\r\nlet dead = document.body.querySelectorAll('canvas') as NodeList;\r\nfor (const item of dead) {\r\n    item.parentNode.removeChild(item);\r\n}\r\ndead = document.body.querySelectorAll('div') as NodeList;\r\nfor (const item of dead) {\r\n    item.parentNode.removeChild(item);\r\n}\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\nwindow.clearInterval(window.timeout);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}