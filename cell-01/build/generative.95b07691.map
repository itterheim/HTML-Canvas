{"version":3,"sources":["ts/colors.ts","ts/Pi.ts","ts/App.ts","ts/generative.ts"],"names":[],"mappings":"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","file":"generative.95b07691.map","sourceRoot":"..","sourcesContent":["\r\nexport function RGBtoHSB (x: number[]) {\r\n    let h;\r\n    const r = x[0];\r\n    const g = x[1];\r\n    const b = x[2];\r\n    const max = Math.max(r, g, b);\r\n    const min = Math.min(r, g, b);\r\n    const m_m = max - min;\r\n    const s = max === 0 ? 0 : m_m / max;\r\n    const v = max;\r\n\r\n    switch (max) {\r\n        case min:\r\n            h = 0;\r\n            break;\r\n\r\n        case r:\r\n            h = 60 * ((g - b) / m_m);\r\n            break;\r\n\r\n        case g:\r\n            h = 60 * (2 + ((b - r) / m_m));\r\n            break;\r\n\r\n        case b:\r\n            h = 60 * (4  + ((r - g) / m_m));\r\n            break;\r\n    }\r\n    return [h, s, v];\r\n\r\n}\r\n\r\n/* Conversion from HSB/HSV to RGB */\r\n\r\nexport function HSBtoRGB (x: number[]) {\r\n    let r;\r\n    let g;\r\n    let b;\r\n    const h = (isNaN(x[0]) || x[0] < 0 || x[0] > 360 ? 0 : x[0]) / 60;\r\n    const s = x[1];\r\n    const v = x[2];\r\n    const c = v * s;\r\n    const d = (h % 2) - 1;\r\n    const i = c * (1 - (d < 0 ? -d : d));\r\n    const m = v - c;\r\n\r\n    r = g = b = 0;\r\n\r\n    if (0 <= h && h <= 1) {\r\n        r = c;\r\n        g = i;\r\n        b = 0;\r\n\r\n    } else if (1 < h && h <= 2) {\r\n        r = i;\r\n        g = c;\r\n        b = 0;\r\n\r\n    } else if (2 < h && h <= 3) {\r\n        r = 0;\r\n        g = c;\r\n        b = i;\r\n\r\n    } else if (3 < h && h <= 4) {\r\n        r = 0;\r\n        g = i;\r\n        b = c;\r\n\r\n    } else if (4 < h && h <= 5) {\r\n        r = i;\r\n        g = 0;\r\n        b = c;\r\n\r\n    } else if (5 < h && h <= 6) {\r\n        r = c;\r\n        g = 0;\r\n        b = i;\r\n\r\n    }\r\n    return [Math.round(r + m), Math.round(g + m), Math.round(b + m)];\r\n\r\n}\r\n","export const Pir\n","import { HSBtoRGB } from './colors';\r\nimport { Pi } from './Pi';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        anim: number;\r\n        timeout: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\ninterface Point { x: number; y: number; }\r\n\r\nexport class App {\r\n    private canvas: HTMLCanvasElement;\r\n    private ctx: CanvasRenderingContext2D;\r\n\r\n    private scale = 12;\r\n\r\n    private size: Point;\r\n    private padding: Point;\r\n\r\n    private colors: { [key: string]: number[] } = {};\r\n\r\n    constructor () {\r\n        const old = document.querySelector('canvas');\r\n        if (old) { old.parentNode.removeChild(old); }\r\n\r\n        window.cancelAnimationFrame(window.anim);\r\n        window.clearInterval(window.interval);\r\n        window.clearTimeout(window.timeout);\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n\r\n        document.body.insertAdjacentElement('afterbegin', this.canvas);\r\n\r\n        window.onresize = () => {\r\n            window.cancelAnimationFrame(window.anim);\r\n            this.resize();\r\n            this.run();\r\n        };\r\n\r\n        this.resize();\r\n        this.run();\r\n    }\r\n\r\n    private run () {\r\n        console.clear();\r\n\r\n        this.size = {\r\n            x: Math.floor(this.canvas.width / this.scale),\r\n            y: Math.floor(this.canvas.height / this.scale)\r\n        };\r\n\r\n        this.padding = {\r\n            x: (this.canvas.width - (this.size.x * this.scale)) / 2,\r\n            y: (this.canvas.height - (this.size.y * this.scale)) / 2\r\n        };\r\n\r\n        let i = 0;\r\n        const max = Math.min(this.size.x * this.size.y, Pi.length);\r\n\r\n        let history: string[] = [];\r\n\r\n        const colorOffset = Math.random() * 360;\r\n        for (let j = 0; j < 10; j++) {\r\n            history[j.toString()] = [];\r\n            this.colors[j.toString()] = HSBtoRGB([(colorOffset + 360 * j / 10) % 360, 0.7, 200]);\r\n        }\r\n\r\n        const step = (time: number) => {\r\n            if (i >= max) { return; }\r\n\r\n            window.anim = window.requestAnimationFrame((t) => step(t));\r\n\r\n            for (let j = 0; j < 8; j++) {\r\n                const n = Pi[i];\r\n\r\n                if (history[0] === n) {\r\n                    history.push(n);\r\n                } else {\r\n                    history = [n];\r\n                }\r\n\r\n                this.renderValue(i, n, history);\r\n\r\n                i++;\r\n            }\r\n\r\n        };\r\n\r\n        window.anim = window.requestAnimationFrame((t) => step(t));\r\n    }\r\n\r\n    private renderValue (i: number, n: string, history: string[]) {\r\n        const xi = i % this.size.x;\r\n        const yi = Math.floor(i / this.size.x);\r\n        const x = this.padding.x + xi * this.scale + this.scale / 2;\r\n        const y = this.padding.y + yi * this.scale + this.scale / 2;\r\n\r\n        if (history.length > 1 || n === Pi[i + 1]) {\r\n            this.ctx.fillStyle = `rgba(${this.colors[n].join(',')}, 1)`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x + 1, y + 1, this.scale / 2 - 1, 0, Math.PI * 2, false);\r\n            this.ctx.fill();\r\n        }\r\n\r\n        if (i === 0) { return; }\r\n\r\n        const diff = parseInt(Pi[i - 1], 10) - parseInt(n, 10);\r\n        if (diff > 0) {\r\n            this.ctx.fillStyle = `rgba(${this.colors[n].join(',')}, 0.2)`;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x + 1, y + 1, this.scale / 2 - 1, 0, Math.PI * 2, false);\r\n            this.ctx.fill();\r\n        } else if (diff < 0) {\r\n            this.ctx.strokeStyle = `rgba(${this.colors[n].join(',')}, 0.4)`;\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x + 1, y + 1, this.scale / 2 - 1 - this.ctx.lineWidth / 2, 0, Math.PI * 2, false);\r\n            this.ctx.stroke();\r\n        }\r\n\r\n        // this.ctx.fillStyle = '#000';\r\n        // this.ctx.textAlign = 'center';\r\n        // this.ctx.textBaseline = 'middle';\r\n        // this.ctx.font = `${this.scale / 2}px sans-serif`;\r\n        // this.ctx.fillText(n, x, y + 1);\r\n    }\r\n\r\n    private clear () {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    private resize () {\r\n        const w = document.body.clientWidth;\r\n        const h = document.body.clientHeight;\r\n\r\n        if (typeof window.devicePixelRatio === 'number') {\r\n            this.canvas.width = w * window.devicePixelRatio;\r\n            this.canvas.height = h * window.devicePixelRatio;\r\n        } else {\r\n            this.canvas.width = w;\r\n            this.canvas.height = h;\r\n        }\r\n    }\r\n}\r\n","import { App } from './App';\r\n\r\ndeclare global {\r\n    // tslint:disable-next-line:interface-name\r\n    interface Window {\r\n        anim: number;\r\n        interval: number;\r\n    }\r\n}\r\n\r\nlet dead = document.body.querySelector('canvas') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\ndead = document.body.querySelector('div') as HTMLElement;\r\nif (dead) {\r\n    dead.parentNode.removeChild(dead);\r\n}\r\nwindow.cancelAnimationFrame(window.anim);\r\nwindow.clearInterval(window.interval);\r\n\r\nconsole.clear();\r\nconsole.log(new Date());\r\n\r\nnew App();\r\n"]}